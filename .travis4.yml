sudo: required
dist: trusty
language: generic
jdk: oraclejdk8
os: linux

before_cache:
  # Do not cache a few Gradle files/directories (see https://docs.travis-ci.com/user/languages/java/#Caching)
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
  - rm -f  $HOME/.gradle/caches/*/fileHashes/fileHashes.bin
  - rm -f  $HOME/.gradle/caches/*/fileHashes/fileHashes.lock

cache:
  directories:
  # Gradle dependencies
  - $HOME/.gradle/caches/
  - $HOME/.gradle/wrapper/
  # Android build cache (see http://tools.android.com/tech-docs/build-cache)
  - $HOME/.android/build-cache
  - $HOME/android-sdk-dl
  - $HOME/android-sdk



install:
  # Download and unzip the Android SDK tools (if not already there thanks to the cache mechanism)
  # Latest version available here: https://developer.android.com/studio/#command-tools
  - mkdir -p $HOME/android-sdk-dl
  - mkdir -p $HOME/android-sdk
  - if test ! -e $HOME/android-sdk-dl/sdk-tools.zip ; then curl https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip > $HOME/android-sdk-dl/sdk-tools.zip ; fi
  - unzip -qq -n $HOME/android-sdk-dl/sdk-tools.zip -d $HOME/android-sdk

  # Install or update Android SDK components (will not do anything if already up to date thanks to the cache mechanism)
  - echo y | $HOME/android-sdk/tools/bin/sdkmanager 'tools' > /dev/null
  - echo y | $HOME/android-sdk/tools/bin/sdkmanager 'platform-tools' > /dev/null
  - echo y | $HOME/android-sdk/tools/bin/sdkmanager 'build-tools;28.0.2' > /dev/null
  - echo y | $HOME/android-sdk/tools/bin/sdkmanager 'platforms;android-27' > /dev/null
  - echo y | $HOME/android-sdk/tools/bin/sdkmanager 'platforms;android-22' > /dev/null
  - echo y | $HOME/android-sdk/tools/bin/sdkmanager 'extras;google;m2repository' > /dev/null
  - echo y | $HOME/android-sdk/tools/bin/sdkmanager 'extras;android;m2repository' > /dev/null
  - echo y | $HOME/android-sdk/tools/bin/sdkmanager 'extras;google;google_play_services' > /dev/null
  - echo y | $HOME/android-sdk/tools/bin/sdkmanager 'emulator' > /dev/null
#  - echo y | $HOME/android-sdk/tools/bin/sdkmanager 'system-images;android-28;default;x86_64' > /dev/null
  - yes | $HOME/android-sdk/tools/bin/sdkmanager --licenses

env:
  - SYS=22 ABI="google_apis;armeabi-v7a"
  - SYS=22 ABI="default;armeabi-v7a"
  - SYS=21 ABI="default;armeabi-v7a"
  - SYS=20 ABI="default;armeabi-v7a"
  - SYS=19 ABI="default;armeabi-v7a"


jobs:
  include:
  - stage: test
    before_script:
    - export ANDROID_HOME=$HOME/android-sdk/
    - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools
    - yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses
    - $ANDROID_HOME/tools/bin/sdkmanager "system-images;android-$SYS;$ABI" > /dev/null
    - $ANDROID_HOME/tools/bin/sdkmanager --list | head -15
    - yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses
    - echo no | $ANDROID_HOME/tools/bin/avdmanager create avd --force -n test -k "system-images;android-$SYS;$ABI"
    - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &
    - $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop init.svc.bootanim) ]]; do sleep 1; done; input keyevent 82'
    - $ANDROID_HOME/platform-tools/adb shell settings put global window_animation_scale 0 &
    - $ANDROID_HOME/platform-tools/adb shell settings put global transition_animation_scale 0 &
    - $ANDROID_HOME/platform-tools/adb shell settings put global animator_duration_scale 0 &
    - $ANDROID_HOME/platform-tools/adb shell settings put secure show_ime_with_hard_keyboard 0 &
    - $ANDROID_HOME/platform-tools/adb shell input keyevent 82 &
    script:
    - echo done
